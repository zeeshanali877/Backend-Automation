{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2023-05-11T12:17:39.330Z",
    "end": "2023-05-11T12:17:44.222Z",
    "duration": 4892,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "776cba01-d421-4052-80e9-36dd0261abce",
      "title": "",
      "fullFile": "cypress/integration/apitests/createuser-and-getuser.spec.js",
      "file": "cypress/integration/apitests/createuser-and-getuser.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9b6b2e5d-5ea0-4ba5-8a21-5f8096a78963",
          "title": "post user request testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create User Test",
              "fullTitle": "post user request testing Create User Test",
              "timedOut": null,
              "duration": 4861,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var pattern = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nfor (var i = 0; i < 10; i++) {\n  randomtext += pattern.charAt(Math.floor(Math.random() * pattern.length));\n}\ntestEmail = randomtext + '@gmail.com';\nlet userId;\ntry {\n  const res = await cy.request({\n    method: 'POST',\n    url: 'https://gorest.co.in/public/v2/users',\n    headers: {\n      'Authorization': 'Bearer ' + accessToken\n    },\n    body: {\n      \"id\": 3340,\n      \"name\": JSONdata.name,\n      \"email\": testEmail,\n      \"gender\": JSONdata.gender,\n      \"status\": JSONdata.status\n    }\n  });\n  cy.log(JSON.stringify(res));\n  expect(res.status).to.eql(201);\n  expect(res.body).has.property('email', testEmail);\n  expect(res.body).has.property('name', JSONdata.name);\n  expect(res.body).has.property('gender', JSONdata.gender);\n  expect(res.body).has.property('status', JSONdata.status);\n  userId = res.body.id;\n} catch (err) {\n  console.error(err);\n}\n// GET USER//\ntry {\n  const res2 = await cy.request({\n    method: 'GET',\n    url: `https://gorest.co.in/public/v2/users/${userId}`,\n    headers: {\n      'Authorization': 'Bearer ' + accessToken\n    }\n  });\n  cy.log('user id is:' + userId);\n  expect(res2.body).has.property('id', userId);\n  expect(res2.body.id.name).has.property('name', 'chiko');\n} catch (err) {\n  console.error(err);\n}",
              "err": {
                "message": "CypressError: Cypress test was stopped while running this command.",
                "estack": "CypressError: Cypress test was stopped while running this command.\n    at cypressErr (http://localhost:54627/__cypress/runner/cypress_runner.js:154824:18)\n    at Object.errByPath (http://localhost:54627/__cypress/runner/cypress_runner.js:154879:10)\n    at http://localhost:54627/__cypress/runner/cypress_runner.js:156492:80",
                "diff": null
              },
              "uuid": "1f5f91f1-c37a-4ee8-94fd-e8aa36834fa4",
              "parentUUID": "9b6b2e5d-5ea0-4ba5-8a21-5f8096a78963",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1f5f91f1-c37a-4ee8-94fd-e8aa36834fa4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4861,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}